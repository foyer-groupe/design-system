/********ButtonContained********/
.ButtonContained {
  position: relative;
  display: inline-flex;
  align-items: center;
  overflow: hidden;
  min-height: $button-base-height-sm;
  padding: $button-base-padding-sm;
  color: map-get($colors, white) !important; // important to be used with <a> instead of <button>
  font-family: $font-family;
  font-size: $button-base-font-size-sm;
  line-height: 1;
  font-weight: $font-weight-medium;
  text-align: left;
  text-transform: uppercase;
  text-decoration: none !important; // to be used with <a> instead of <button>
  vertical-align: middle;
  background-size: 250%;
  background-position: 0 0;
  border-radius: $border-radius-default;
  opacity: 1;
  box-shadow: $button-shadow;
  transition: all .3s ease;
  cursor: pointer;

  &,
  &:active,
  &:focus,
  &:hover {
    outline: 0;
    border: 0;

    &::-moz-focus-inner {
      border: 0;
    }
  }

  // ---- Preparing click animation ---------------------------------------
  &:not(.is-loading) {
    &:before {
      content: '';
      position: absolute;
      left: 50%;
      top: 50%;
      width: 120px;
      height: 120px;
      background: rgba(0,0,0,.2);
      transform: translateY(-50%) translateX(-50%) scale(2);
      opacity: 0;
      border-radius: 100%;
      transition: all .75s;
    }
  }

  // ---- General states --------------------------------------------------
  &:disabled,
  &[aria-disabled="true"],
  &.is-disabled {
    &:after {
      @include position(absolute,0,0,0,0);
      background: map-get($colors, white);
      opacity: .5;
      content: ' ';
    }

    cursor: not-allowed;
  }

  &:hover,
  &:focus {
    &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
      background-position: 100% 0;
      box-shadow: $button-shadow-hover;
      transform: translateY(-2px);
    }
  }

  &:active {
    &:not([disabled]):not(.is-disabled) {
      transform: translateY(2px);
      box-shadow: $button-shadow-hover;

      &:before {
        transition: none;
        transform: translateY(-50%) translateX(-50%) scale(0);
        opacity: 1;
      }
    }
  }

  @include is-loading();


  // ---- Button primary -------------------------------------------------
  &, // by default
  &.is-primary {
    background-image: map-get($gradients, blue-complete);
  }

  // ---- Button warning -----------------------------------------------
  &.is-warning {
    background-image: map-get($gradients, orange-complete);
  }

  // ---- Button danger ------------------------------------------------
  &.is-danger {
    background-image: map-get($gradients, red-complete);
  }

  // ---- Button success ------------------------------------------------
  &.is-success {
    background-image: map-get($gradients, green-complete);
  }

  // ---- Button with icon -----------------------------------------------
  i {
    display: inline-block;
    font-size: $button-base-icon-size-sm;
    line-height: 1;
    vertical-align: middle;
  }

  span {
    display: inline-block;
    vertical-align: middle;
  }

  i + span,
  span + i {
    margin-left: 5px;
  }

  // ---- Other states --------------------------------------------------
  &.is-full-width {
    width: 100%;
    justify-content: center;
  }

  &.is-rounded {
    border-radius: 200px;
  }

  // ---- Other Sizes ---------------------------------------------------
  @media (min-width: map-get($breakpoints, sm)) {
    min-height: $button-base-height;
    padding: $button-base-padding;
    font-size: $button-base-font-size;

    i {
      font-size: $button-base-icon-size;
    }

    i + span,
    span + i {
      margin-left: 8px;
    }
  }

  &.is-small {
    min-height: $button-small-height;
    padding: $button-small-padding;
    font-size: $button-small-font-size;

    i {
      font-size: $button-small-icon-size;
    }

    i + span,
    span + i {
      margin-left: 4px;
    }
  }

  &.is-medium {
    min-height: $button-medium-height-sm;
    padding: $button-medium-padding-sm;
    font-size: $button-medium-font-size-sm;

    i {
      font-size: $button-medium-icon-size-sm;
    }

    i + span,
    span + i {
      margin-left: 4px;
    }

    @media (min-width: map-get($breakpoints, sm)) {
      min-height: $button-medium-height;
      padding: $button-medium-padding;
      font-size: $button-medium-font-size;

      i {
        font-size: $button-medium-icon-size;
      }

      i + span,
      span + i {
        margin-left: 5px;
      }
    }
  }

  &.is-big {
    min-height: $button-big-height-sm;
    padding: $button-big-padding-sm;
    font-size: $button-big-font-size-sm;

    i {
      font-size: $button-big-icon-size-sm;
    }

    i + span,
    span + i {
      margin-left: 5px;
    }

    @media (min-width: map-get($breakpoints, sm)) {
      min-height: $button-big-height;
      padding: $button-big-padding;
      font-size: $button-big-font-size;

      i {
        font-size: $button-big-icon-size;
      }
    }
  }

}

/********ButtonText********/
.ButtonText {
  position: relative;
  display: inline-flex;
  align-items: center;
  overflow: hidden;
  min-height: $button-base-height-sm; // Warning, min-height associate with display flex are not compatible IE11, the button content can not be centered vertically.
  padding: $button-base-padding-sm;
  border-radius: $border-radius-default;
  background: transparent;
  font-family: $font-family;
  font-size: $button-base-font-size-sm;
  line-height: 1.5;
  font-weight: $font-weight-medium;
  text-align: left;
  text-transform: uppercase;
  text-decoration: none !important; // to be used with <a> instead of <button>
  vertical-align: middle;
  opacity: 1;
  transition: opacity .3s ease,
  color .3s ease,
  border .3s ease,
  background .3s ease,
  box-shadow .3s ease;
  cursor: pointer;

  &,
  &:active,
  &:focus,
  &:hover {
    outline: 0;
    border: 0;
    &::-moz-focus-inner {
      border: 0;
    }
  }

  &.is-lowercase {
    min-height: 0;
    padding: 0;
    text-transform: none;

    &:hover,
    &:focus {
      &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
        background: transparent;
        &, // by default
        &.is-primary {
          color: shade(map-get($colors, info),15%);
        }

        &.is-warning {
          color: shade(map-get($colors, warning),15%);
        }

        &.is-danger {
          color: shade(map-get($colors, danger),15%);
        }

        &.is-success {
          color: shade(map-get($colors, success),15%);
        }
      }
    }

    &.is-loading {
      overflow: visible;
      &:before {
        left: calc(100% + 8px);
      }
    }
  }

  // ---- General states --------------------------------------------------
  &:disabled,
  &[aria-disabled="true"],
  &.is-disabled {
    opacity: .5;
    cursor: not-allowed;
  }

  &:hover,
  &:focus {
    &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
      background: map-get($colors, grey-050);
    }
  }

  @include is-loading();

  // ---- Button primary -------------------------------------------------
  &, // by default
  &.is-primary {
    &,
    &:hover,
    &:focus {
      &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
        color: map-get($colors, info);
      }
    }
  }

  // ---- Button warning -----------------------------------------------
  &.is-warning {
    &,
    &:hover,
    &:focus {
      &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
        color: map-get($colors, warning);
      }
    }
  }

  // ---- Button danger ------------------------------------------------
  &.is-danger {
    &,
    &:hover,
    &:focus {
      &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
        color: map-get($colors, danger);
      }
    }
  }

  // ---- Button success ------------------------------------------------
  &.is-success {
    &,
    &:hover,
    &:focus {
      &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
        color: map-get($colors, success);
      }
    }
  }

  // ---- Button neutral ------------------------------------------------
  &.is-neutral {
    &,
    &:hover,
    &:focus {
      &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
        color: map-get($colors, grey-500);
      }
    }
  }

  // ---- Button with icon -----------------------------------------------
  i {
    display: inline-block;
    font-size: $button-base-icon-size-sm;
    line-height: 1;
    vertical-align: middle;
  }


  span {
    display: inline-block;
    vertical-align: middle;
  }

  i + span,
  span + i {
    margin-left: 5px;
  }

  // ---- Other Sizes ---------------------------------------------------
  @media (min-width: map-get($breakpoints, sm)) {
    min-height: $button-base-height;
    padding: $button-base-padding;
    font-size: $button-base-font-size;

    i {
      font-size: $button-base-icon-size;
    }

    i + span,
    span + i {
      margin-left: 8px;
    }
  }

  &.is-full-width {
    width: 100%;
  }

  &.is-rounded {
    border-radius: 200px;
  }

  &.is-small {
    min-height: $button-small-height;
    padding: $button-small-padding;
    font-size: $button-small-font-size;

    i {
      font-size: $button-small-icon-size;
    }

    i + span,
    span + i {
      margin-left: 4px;
    }
  }

  &.is-medium {
    min-height: $button-medium-height-sm;
    padding: $button-medium-padding-sm;
    font-size: $button-medium-font-size-sm;

    i {
      font-size: $button-medium-icon-size-sm;
    }

    i + span,
    span + i {
      margin-left: 5px;
    }

    @media (min-width: map-get($breakpoints, sm)) {
      min-height: $button-medium-height;
      padding: $button-medium-padding;
      font-size: $button-medium-font-size;

      i {
        font-size: $button-medium-icon-size;
      }

      i + span,
      span + i {
        margin-left: 5px;
      }
    }
  }

  &.is-big {
    min-height: $button-big-height-sm;
    padding: $button-big-padding-sm;
    font-size: $button-big-font-size-sm;

    i {
      font-size: $button-big-icon-size-sm;
    }

    i + span,
    span + i {
      margin-left: 5px;
    }

    @media (min-width: map-get($breakpoints, sm)) {
      min-height: $button-big-height;
      padding: $button-big-padding;
      font-size: $button-big-font-size;

      i {
        font-size: $button-big-icon-size;
      }
    }
  }

}

/********ButtonOutlined********/
.ButtonOutlined {
  position: relative;
  display: inline-flex;
  align-items: center;
  overflow: hidden;
  min-height: $button-base-height-sm;
  padding: $button-base-padding-sm;
  border: 1px solid transparent !important; // important to prevent overwriting by a global reset.css
  border-radius: $border-radius-default;
  background: transparent;
  font-family: $font-family;
  font-size: $button-base-font-size-sm;
  line-height: 1;
  font-weight: $font-weight-medium;
  text-align: left;
  text-transform: uppercase;
  text-decoration: none !important; // to be used with <a> instead of <button>
  vertical-align: middle;
  opacity: 1;
  transition: opacity .3s ease,
  color .3s ease,
  border .3s ease,
  background .3s ease,
  box-shadow .3s ease;
  cursor: pointer;

  &,
  &:active,
  &:focus,
  &:hover {
    outline: 0;
    &::-moz-focus-inner {
      border: 0;
    }
  }

  // ---- General states --------------------------------------------------
  &:disabled,
  &[aria-disabled="true"],
  &.is-disabled {
    opacity: .5;
    cursor: not-allowed;
  }

  &:hover,
  &:focus {
    &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
      background: map-get($colors, grey-050);
    }
  }

  @include is-loading();

  // ---- Button inverse -------------------------------------------------
  &.is-inverse {
    color: map-get($colors, white) !important; // important to be used with <a> instead of <button>
    border-color: map-get($colors, white) !important; // important to prevent overwriting by a global reset.css

    &:hover {
      &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
        color: map-get($colors, info);
        background: map-get($colors, white);
      }
    }
  }

  // ---- Button with icon -----------------------------------------------
  i {
    display: inline-block;
    font-size: $button-base-icon-size-sm;
    line-height: 1;
    vertical-align: middle;
  }

  span {
    display: inline-block;
    vertical-align: middle;
  }

  i + span,
  span + i {
    margin-left: 5px;
  }

  // ---- Color variant --------------------------------------------------

  // ---- Button primary -------------------------------------------------
  &.is-primary {
    border-color: map-get($colors, blue-foyer) !important; // important to prevent overwriting by a global reset.css
    color: map-get($colors, blue-foyer) !important; // important to be used with <a> instead of <button>

    &.is-inverse {
      &:hover,
      &:focus {
        &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
          color: map-get($colors, blue-foyer) !important; // important to be used with <a> instead of <button>
        }
      }
    }
  }

  // ---- Button neutral -------------------------------------------------
  &.is-neutral {
    border-color: map-get($colors, grey-500) !important; // important to prevent overwriting by a global reset.css
    color: map-get($colors, grey-500) !important; // important to be used with <a> instead of <button>

    &.is-inverse {
      &:hover,
      &:focus {
        &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
          color: map-get($colors, grey-500) !important; // important to be used with <a> instead of <button>
        }
      }
    }
  }

  // ---- Button info -----------------------------------------------
  &, // by default
  &.is-info {
    border-color: map-get($colors, info) !important; // important to prevent overwriting by a global reset.css
    color: map-get($colors, info) !important; // important to be used with <a> instead of <button>

    &.is-inverse {
      &:hover,
      &:focus {
        &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
          color: map-get($colors, info) !important; // important to be used with <a> instead of <button>
        }
      }
    }
  }

  // ---- Button warning -----------------------------------------------
  &.is-warning {
    border-color: map-get($colors, warning) !important; // important to prevent overwriting by a global reset.css
    color: map-get($colors, warning) !important; // important to be used with <a> instead of <button>

    &.is-inverse {
      &:hover,
      &:focus {
        &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
          color: map-get($colors, warning) !important; // important to be used with <a> instead of <button>
        }
      }
    }
  }

  // ---- Button danger ------------------------------------------------
  &.is-danger {
    border-color: map-get($colors, danger) !important; // important to prevent overwriting by a global reset.css
    color: map-get($colors, danger) !important; // important to be used with <a> instead of <button>

    &.is-inverse {
      &:hover,
      &:focus {
        &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
          color: map-get($colors, danger) !important; // important to be used with <a> instead of <button>
        }
      }
    }
  }

  // ---- Button success ------------------------------------------------
  &.is-success {
    border-color: map-get($colors, success) !important; // important to prevent overwriting by a global reset.css
    color: map-get($colors, success) !important; // important to be used with <a> instead of <button>

    &.is-inverse {
      &:hover,
      &:focus {
        &:not([disabled]):not(.is-disabled):not([aria-disabled="true"]) {
          color: map-get($colors, success) !important; // important to be used with <a> instead of <button>
        }
      }
    }
  }

  // ---- Button with icon -----------------------------------------------

  &.is-rounded {
    border-radius: 200px;
  }

  // ---- Other Sizes ---------------------------------------------------
  @media (min-width: map-get($breakpoints, sm)) {
    min-height: $button-base-height;
    padding: $button-base-padding;
    font-size: $button-base-font-size;

    i {
      font-size: $button-base-icon-size;
    }

    i + span,
    span + i {
      margin-left: 8px;
    }
  }

  &.is-small {
    min-height: $button-small-height;
    padding: $button-small-padding;
    font-size: $button-small-font-size;

    i {
      font-size: $button-small-icon-size;
    }

    i + span,
    span + i {
      margin-left: 4px;
    }
  }

  &.is-medium {
    min-height: $button-medium-height-sm;
    padding: $button-medium-padding-sm;
    font-size: $button-medium-font-size-sm;

    i {
      font-size: $button-medium-icon-size-sm;
    }

    i + span,
    span + i {
      margin-left: 4px;
    }

    @media (min-width: map-get($breakpoints, sm)) {
      min-height: $button-medium-height;
      padding: $button-medium-padding;
      font-size: $button-medium-font-size;

      i {
        font-size: $button-medium-icon-size;
      }

      i + span,
      span + i {
        margin-left: 5px;
      }
    }
  }

  &.is-big {
    min-height: $button-big-height-sm;
    padding: $button-big-padding-sm;
    font-size: $button-big-font-size-sm;

    i {
      font-size: $button-big-icon-size-sm;
    }

    i + span,
    span + i {
      margin-left: 5px;
    }

    @media (min-width: map-get($breakpoints, sm)) {
      min-height: $button-big-height;
      padding: $button-big-padding;
      font-size: $button-big-font-size;

      i {
        font-size: $button-big-icon-size;
      }
    }
  }

  &.is-full-width {
    width: 100%;
    justify-content: center;
  }

}

